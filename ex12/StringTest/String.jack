// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	
	field Array str;
	field int length;
	field int max;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		let str = Array.new(maxLength);
		let length = 0;
		let max = maxLength;
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do Array.deAlloc(str);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		let str[length] = c;
		let length = length + 1;
		return str;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int i;
		var int sum;
		let sum = 0;
		let i = 0;
		while (i < length) {
			if (str[i] > 48 & str[i] < 58) {
				let sum = sum + (str[i] - 48);
			}
			else {
				return sum;
			}
			let i = i + 1;
		}
		return sum;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		let length = 0;
		do recSetInt(number);
		return;
    }
    
    method void recSetInt(int number) {
		var int mod;
		var int div;
		let div = number;
		let div = number / 10;
		let mod = number - div;
		if (number < 10)
		{
			let str[length] = mod - 48;
			let length = length + 1;
		}
		else{
			let str[length] = mod - 48;
			let length = length + 1;
			do appendChar(mod - 48);
		}
		return;
			
    }

    /** Returns the new line character. */
    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
