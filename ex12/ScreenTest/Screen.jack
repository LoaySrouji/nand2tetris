// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

	static boolean whitePixel;
	static boolean blackPixel;
	static boolean color;
	static Array screen;
	
    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let whitePixel = false;
		let blackPixel = true;
		let color = whitePixel;
		return;
	}

    /** Erases the whole screen. */
    function void clearScreen() {
    	var int i;
		let i = screen;
		while (i < 8192) {
			let screen[i] = whitePixel;
		}
		return;
	}

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
    	let color = b;
		return;
	}

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
    	var int address;
		var int mask;
		
		let address = (y * 32) + (x / 16);
		let mask = Math.two_to_the(x & 15);
		
		if (color) {
			let screen[address] = screen[address] | mask;
		}
		else {
			let screen[address] = screen[address] & ~mask;
		}
		return;
	}

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
    	var int dx, dy;
		var int startX, startY, endX, endY;
		var int i, j;
		var int proportion;
		
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		if (x1 < x2) {
			let startX = x1;
			let endX = x2;
		}
		else {
			let startX = x2;
			let endX = x1;
		}
		if (y1 < y2) {
			let startY = y1;
			let endY = y2;
		}
		else {
			let startY = y2;
			let endY = y1;
		}
		let i = 0;
		let j = 0;
		let proportion = 0;
		while ((i < dx) | (j < dy)) {
			do Screen.drawPixel(startX + i, startY + j);
			if (proportion < 0) {
				let i = i + 1;
				let proportion = proportion + dy;				
			}
			else {
				let j = j + 1;
				let proportion = proportion - dx;
			}
		}		
		return;
	}

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    	var int dx, dy;
		var int startX, startY, endX, endY;
		var int i;
		
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		if (x1 < x2) {
			let startX = x1;
			let endX = x2;
		}
		else {
			let startX = x2;
			let endX = x1;
		}
		if (y1 < y2) {
			let startY = y1;
			let endY = y2;
		}
		else {
			let startY = y2;
			let endY = y1;
		}
		
		let i = 0;
		while ((startX + i) < endX) {
			do Screen.drawLine(startX + i, startY, endX, endY); 
			let i = i + 1;
		}
		return;
	}

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
    	var int startY, endY;
		var int dy;
		let startY = cy - r;
		let endY = cy + r;
		let dy = 0;
		while ((startY + dy) < endY) {
			do Screen.drawLine((cx - Math.sqrt((r * r) - (dy * dy))), (cy + dy), (cx + Math.sqrt((r * r) - (dy * dy))), (cy + dy));
			let dy = dy + 1;
		}
		return;
	}
}
