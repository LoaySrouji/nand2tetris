class Game {

    // The snake
    field Snake snake;
	
	// The food
	field Food food;

    // The snake's movement direction
    field int direction; // 1=up, 2=down, 3=left, 4=right
	
	// check if snake is alive
	field boolean isAlive;

    /** Constructs a new Square Game. */
    constructor Game new() {
		let food = Food.new();
        let snake = Snake.new();
        let direction = 4;
		let isAlive = true;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do snake.dispose();
		do food.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run() {
        var char key;
        
        while (isAlive) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSnake();
				if (~(isAlive)) {
					return;
				}
            }

            if (key = 81) {
                let isAlive = false;
            }
            if ((key = 131) & (~(direction = 2))) {
                let direction = 1;
            }
            if ((key = 133) & (~(direction = 1))) {
                let direction = 2;
            }
            if ((key = 130) & (~(direction = 4))) {
                let direction = 3;
            }
            if ((key = 132) & (~(direction = 3))) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSnake();
				if (~(isAlive)) {
					return;
				}
            }
        }
            
        return;
	}

    /** Moves the snake to the current direction. */
    method void moveSnake() {
        let isAlive = snake.advanceHead(direction);
		if ((~(eatFood())) & isAlive) {
			do snake.deleteTail();
		}

        do Sys.wait(100); // Delays the next movement.
        return;
    }
	
	method boolean eatFood() {
		if (((snake.getX()) = food.getX()) & ((snake.getY()) = food.getY())) {
			do food.generateNew();
			while (~(snake.isFoodLegal(food.getX(), food.getY()))){
				do food.generateNew();
			}
			do snake.increaseScore();
			return true;
		}
		return false;
	}
	
	method int getScore() {
		return snake.getScore();
	}
}