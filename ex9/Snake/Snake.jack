class Snake {
	field Block head, middle, tail;
	
	field int size, rowEnd, colEnd, score;
	
	constructor Snake new() {
		let head = Block.new(64, 0, null);
		let middle = Block.new(32, 0, head);
		let tail = Block.new(0, 0, middle);
		do head.draw();
		do middle.draw();
		do tail.draw();
		let size = 32;
		let rowEnd = 255;
		let colEnd = 511;
		let score = 0;
		return this;
		}
	
	/** Deallocates the object's memory. */
    method void dispose() {
		var Block temp;
		while (~(tail.getNext() = null)) {
			let temp = tail;
			let tail = tail.getNext();
			do temp.dispose();
		}
        do Memory.deAlloc(this);
        return;
    }
	
	/** Advance the snake on the screen. */
    method boolean advanceHead(int direction) {
        var Block newBlock;
		// 1=up,2=down,3=left,4=right
		if (direction = 1) {
			if (~(isLegal(head.getX(), (head.getY() - size)))){
				return false;
			}
			let newBlock = Block.new(head.getX(), (head.getY() - size), null);
		}
		if (direction = 2) {
			if (~(isLegal(head.getX(), (head.getY() + size)))){
				return false;
			}
			let newBlock = Block.new(head.getX(), (head.getY() + size), null);
		}
		if (direction = 3) {
			if (~(isLegal((head.getX() - size), head.getY()))){
				return false;
			}
			let newBlock = Block.new((head.getX() - size), head.getY(), null);
		}
		if (direction = 4) {
			if (~(isLegal((head.getX() + size), head.getY()))){
				return false;
			}
			let newBlock = Block.new((head.getX() + size), head.getY(), null);
		}
		do head.setNext(newBlock);
		let head = newBlock;
		do head.draw();
        return true;
    }
	
	method void deleteTail(){
		var Block temp;
		let temp = tail;
		let tail = tail.getNext();
		do temp.erase();
		do temp.dispose();
		return;
	}
	
	method boolean isLegal(int newX, int newY){
		var Block temp;
		let temp = tail.getNext();
		while (~(temp = head)){
			if ((temp.getX() = newX) & (temp.getY() = newY)){
				return false;
			}
			let temp = temp.getNext();
		}
		if ((newX < 0) | (newX > colEnd) | (newY < 0) | (newY > rowEnd)){
			return false;
		}
		return true;
	}
	
	method boolean isFoodLegal(int newX, int newY) {
		var Block temp;
		let temp = tail.getNext();
		while (~(temp = null)){
			if ((temp.getX() = newX) & (temp.getY() = newY)){
				return false;
			}
			let temp = temp.getNext();
		}
		return true;
	}
	
	method void increaseScore() {
		let score = score + 10;
		return;
	}
	
	/** Getters */
	
	method int getX() {
		return head.getX();
	}
	method int getY() {
		return head.getY();
	}
	method int getScore() {
		return score;
	}
}	

	
	

		