// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Set name conventions
    And16(a=instruction, b=true, out[0]=j3, out[1]=j2, out[2]=j1,
						   out[3]=d3, out[4]=d2, out[5]=d1,
						   out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1,
						   out[12]=ia, out[15]=aorc, out[0..14]=addressa);
	DMux(in=true, sel=aorc, a=ainst, b=cinst);
    
    //Set ARegister
    And(a=cinst, b=d1, out=computetoa);
    Mux16(a=instruction, b=alu, sel=cinst, out=newa);
    Or(a=ainst, b=computetoa, out=loada);
    ARegister(in=newa, load=loada, out=a);
    
    //Set DRegister
    And(a=d2, b=cinst, out=loadd);
    DRegister(in=alu, load=loadd, out=d);
    
    //Set ALU
    Mux16(a=a, b=inM, sel=ia, out=aorm);
    ALU(x=d, y=aorm, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=alu, zr=zr, ng=ng);
    
    //Set jump conditions
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=j1, b=ng, out=jlt);
    And(a=j2, b=zr, out=jeq);
    And(a=j3, b=pos, out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jmp);
    And(a=cinst, b=jmp, out=shouldjmp);
    
    //OUTPUTS
    
    And16(a=alu, b=true, out=outM);
    
    And16(a=a, b=true, out[0..14]=addressM);
    
    And(a=d3, b=cinst, out=writeM);
    
    PC(in=a, load=shouldjmp, inc=true, reset=reset, out[0..14]=pc);
}